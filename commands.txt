# file for some common ansible commands and notes

* ansible all --key-file ~/.ssh/ansible -i Inventory -m ping (used to create a connection to all servers in inventory file... -m for module)

* ansible.cfg is the default ansible config file you specify. you can use it to create default ansible values.... after that the ansible command is shortened to just "ansible all -m ping"

* ansible all --list-hosts (to list all your hosts connected to ansible)
 
* ansible all -m gather_facts (to like scrape and list some info on the servers its connected to.... you can add "--limit ip.add.ress" to limit the results to just one host)

* ansible all -m apt -a update_cache=yes (using the apt module, basically the same as running 'apt update'. it wont work because to run that command you need sudo privileges. to get that, add "--become".... if theres a sudo password, add "--ask-become-pass")

* ansible all -m apt -a name=package --become (to install a package on all your hosts)

* ansible all -m apt -a "name=package state=latest" --become (to upgrade an already existing package.... whenever you have more than one argument, add "".... making "state=absent" removes the package from the server)

* ansible playbooks are made using yaml format

* ansible-playbook playbook_file.yml (to run a playbook)

* you can use when statements in playbooks for exceptions to different distrubutions. read up about it when you need it

* you can also use variables in your playbooks using curly braces "{{}}"...after declaring the variables, add their values to the inventory file

* you can use the 'package' module to install packages when you have various distros  

* you can group hosts in the inventory file. use square braces "[]" to name the group and put the host ip under that group

* using "pre_tasks" instead of "tasks" in your playbook ensures that that play runs first before all the other plays or tasks

* you can use tags in your playbook. add the "tags" object after "name" and list your desired tags.

* ansible-playbook --list-tags file.yml (to list the tags for a particular playbook)

* ansible-playbook --tags tagname file.yml (to run plays only related to a particular tag....use --tags "tagname,tagname" for multiple tags)

* you can copy files from your main server to slave servers using the "copy" module in your playbook. you have to give it some arguments like "src, dest, owner, group, mode(for permissions)"

* the unarchive module is used to unzip archived files like zip, tar, tar.gz, etc... you can check the documentation for the arguments available

* the "service" module is used to manage services. a good use is when youre installing httpd(apache server) on a centos host, since centos doesnt automatically start the service like ubuntu, you can use the service module to start it.

* you can use the 'lineinfile' module to change a particular line in a file. check documentation for its arguments. 

* 'register' module can be used to capture a state change as a variable. for example you make a change to a config file and you need another state to run only when you make that change. you can add "register: variable" to the end of the first play then on the subsequent play, add "when: variable.changed"

* you can use the "user" module to add a user or users to your hosts.

* the "authorized_key" module is used to add ssh keys to the host

* when working with roles, you'll have to make some edits to your main playbook. first, in your ansible folder, create a roles directory, and a directory for each of your host group in that directory. in each directory create a tasks directory.
it should look like this Ansible/roles/web_server/tasks
then create a main.yml file in each tasks directory... that file should contain all the previous plays for each group.
 
* handlers is a concept you should look into

* also lookup templates
